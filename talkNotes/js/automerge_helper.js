class Container {
    constructor(containerObjectName, parent){
        this.autoMergeContainerName = containerObjectName
        this.HTMLOject = this.createHTMLObject()

        // this.containerObjectID = this.containerObject[SYMBOLS_OBJECT]["objectId"]
        this.parent = parent
    }

    insertAt(doc, index, data){
        this.getObjectInDoc(doc).insertAt(index, data)
    }

    createHTMLObject(){
        let div = document.createElement("div")
        let converted_ID = convertHtmlReadableIdToId(this.objectID)
        div.classList.add(`automerge_${this.autoMergeContainerName}`, converted_ID)
        return div
    }

    getObjectInDoc(_doc=rootDocument.doc){
        let chainArray = getDocumentChain(this)
        console.log(chainArray);
        let returnObject = _doc

        chainArray.forEach(p=>{
            returnObject = returnObject[p]
        })

        console.log(returnObject);
        return returnObject
    }

    searchByElemID(elemID){
        let containerObject = this.getObjectInDoc()
        let elemIDContainerObject = containerObject[SYMBOLS_OBJECT[OBJECT_ELEMENT_IDS]]
        let position = elemIDContainerObject.indexOf(elemID)
        return containerObject[position]
    }

    get objectID(){
      console.log(this.getObjectInDoc());
        return this.getObjectInDoc()[SYMBOLS_OBJECT[OBJECT_ID]]
    }

    get length(){
        return this.getObjectInDoc().length
    }
}


class Element {
    constructor(_HTMLObject){
        // this.parent = container
        _HTMLObject.automergeReference = this
        this.HTMLObject = _HTMLObject
    }
}


function searchIndexInAContainerByElemID(elemContainer, elemID){
    // use element ID to search the index of the an element in a container
    // 2 is Symbol(_elemIds)
    let elemIdSymbol = Object.getOwnPropertySymbols(elemContainer)[2]
    let elemIdArray = elemContainer[elemIdSymbol]
    let position = elemIdArray.indexOf(elemID)
    return position
}


function getElemIDFromObjectID(elemContainer, objID){
  let index = elemContainer.findIndex(p=>{
    return p[Object.getOwnPropertySymbols(p)[1]] == objID
  })
  let elemIdSymbol = Object.getOwnPropertySymbols(elemContainer)[2]
  let elemID = elemContainer[elemIdSymbol][index]
  return elemID
}

function getElementInnerHTML(target){
    if (target.nodeName != "#text"){
        if (target.getAttribute("elem_property") && target.innerHTML){
            return target.innerHTML
        }
    }
    return getElementInnerHTML(target.parentNode)
}

var s = document.querySelector(".pkm_no")

function traceAutomergeElemIdAndProperty(target, elemID="", elemProperty=""){
    // it is used in updating the text element when you change an editable content
    // logic: the HTML object has an attribute called elem_property if it is generated from an object in the automerge doc. For example, in cardcontainer is an HTML object generated by a card object in the doc[cardsArray].
    // elem_property store the key of the object so that you can use this to get the data in the object stored in the array
    // the second part is to get the container objectID. Each HTML container obejct has ID automerge_obj_ID_.
    let endFlag = false
    let targetClassList = target.classList
    let targetProperty = target.getAttribute("elem_property")

    if (targetProperty){
        elemProperty = targetProperty
    }

    if (targetClassList && targetClassList.length){
        targetClassList = Array.from(targetClassList)

        targetClassList.forEach(p=>{
            if (p.startsWith("automerge_obj_ID_")) {
                elemID = convertHtmlReadableIdToId(p)
                endFlag = true
            }
        })
    }

    if (endFlag){
        return [elemID, elemProperty]
    } else {
        return traceAutomergeElemIdAndProperty(target.parentNode, elemID,  elemProperty)
    }
}
// var s = document.querySelector(".pkm_no")
// v = traceAutomergeElemIdAndProperty(s)

function convertIdToHtmlReadableId(original_ID, forQuerySelector){
    // convert the original ID to querySelector class ID
    converted_ID = "automerge_obj_ID_" + original_ID.split("-").join("_").replace(":", "COLON").replace("\n", "")

    if (forQuerySelector){
        return "." + converted_ID
    } else {
        return converted_ID
    }
}

function convertHtmlReadableIdToId(htmlId){
    return htmlId.replace("automerge_obj_ID_", "")
                 .replace("COLON", ":")
                 .split("_").join("-")
}


cardsContainerObject = new Container("cardsContainer", rootDocument)
girlContainerObject = new Container("girlsContainer", rootDocument)
